#
# addon prometheus configuration
#
enabled: true
replicaCount: 1
hub: docker.io/prom
tag: v2.8.0
retention: 20d
nodeSelector: {}

# Specify the pod anti-affinity that allows you to constrain which nodes
# your pod is eligible to be scheduled based on labels on pods that are
# already running on the node rather than based on labels on nodes.
# There are currently two types of anti-affinity:
#    "requiredDuringSchedulingIgnoredDuringExecution"
#    "preferredDuringSchedulingIgnoredDuringExecution"
# which denote “hard” vs. “soft” requirements, you can define your values
# in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
# correspondingly.
# For example:
# podAntiAffinityLabelSelector:
# - key: security
#   operator: In
#   values: S1,S2
#   topologyKey: "kubernetes.io/hostname"
# This pod anti-affinity rule says that the pod requires not to be scheduled
# onto a node if that node is already running a pod with label having key
# “security” and value “S1”.
podAntiAffinityLabelSelector: {}
podAntiAffinityTermLabelSelector: {}

# Controls the frequency of prometheus scraping
scrapeInterval: 15s

contextPath: /prometheus

ingress:
  enabled: false
  ## Used to create an Ingress record.
  hosts:
    - prometheus.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: prometheus-tls
    #   hosts:
    #     - prometheus.local

service:
  annotations: {}
  nodePort:
    enabled: false
    port: 32090

security:
  enabled: true

persistentVolume:
  ## If true, Prometheus server will create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## Prometheus server data Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteOnce

  ## Prometheus server data Persistent Volume annotations
  ##
  annotations: {}

  ## Prometheus server data Persistent Volume existing claim name
  ## Requires server.persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## Prometheus server data Persistent Volume mount root path
  ##
  mountPath: "/prometheus/data"

  ## Prometheus server data Persistent Volume size
  ##
  size: 100Gi

  ## Prometheus server data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  ## Subdirectory of Prometheus server data Persistent Volume to mount
  ## Useful if the volume's root directory is not empty
  ##
  subPath: ""

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the prometheus-server to be run with an arbitrary user
  ##
  enabled: true

  ## initChownData container name
  ##
  name: init-chown-data

  ## initChownData container image
  ##
  image:
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent

  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}